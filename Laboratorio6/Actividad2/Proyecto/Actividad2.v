//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Actividad2(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire [7:0] n1; 
	wire [7:0] n2; 
	wire [7:0] n3; 
	wire [7:0] n4; 
	wire [7:0] n5; 
	wire [7:0] n6; 
	wire [7:0] n7; 
	wire [7:0] n8; 

	wire [2:0] cuenta_in;
	wire [2:0] cuenta_out;
	
	wire reloj1;
	wire reloj2;
	wire reloj3;
	wire reloj4;
	wire reloj5;
	wire reloj6;
	wire reloj7;
	wire reloj8;

//=======================================================
//  Structural coding
//=======================================================

	contador cin(
		.reloj(KEY[3]),
		.cuenta(cuenta_in)
	);
	
	demultiplexor dm1(
		.sel(cuenta_in),
		.i(SW[7:0]),
		.s1(n1),
		.s2(n2),
		.s3(n3),
		.s4(n4),
		.s5(n5),
		.s6(n6),
		.s7(n7),
		.s8(n8)
	);

	demultiplexor dm2(
		.sel(cuenta_in),
		.i(KEY[2]),
		.s1(reloj1),
		.s2(reloj2),
		.s3(reloj3),
		.s4(reloj4),
		.s5(reloj5),
		.s6(reloj6),
		.s7(reloj7),
		.s8(reloj8)
	);

	registro r1(
		.reloj(reloj1),
		.D(SW[7:0]),
		.Q(n1)
	);
	registro r2(
		.reloj(reloj2),
		.D(SW[7:0]),
		.Q(n2)
	);
	registro r3(
		.reloj(reloj3),
		.D(SW[7:0]),
		.Q(n3)
	);
	registro r4(
		.reloj(reloj4),
		.D(SW[7:0]),
		.Q(n4)
	);
	registro r5(
		.reloj(reloj5),
		.D(SW[7:0]),
		.Q(n5)
	);
	registro r6(
		.reloj(reloj6),
		.D(SW[7:0]),
		.Q(n6)
	);
	registro r7(
		.reloj(reloj7),
		.D(SW[7:0]),
		.Q(n7)
	);
	registro r8(
		.reloj(reloj8),
		.D(SW[7:0]),
		.Q(n8)
	);
	
	contador cout(
		.reloj(KEY[1]),
		.cuenta(cuenta_out)
	);

	multiplexor MS(
		.sel(cuenta_out),
		.n1(n1),
		.n2(n2),
		.n3(n3),
		.n4(n4),
		.n5(n5),
		.n6(n6),
		.n7(n7),
		.n8(n8),
		.salida(LEDR[7:0])
	);


	assign LEDR[9] = cuenta[1];
	assign LEDR[8] = cuenta[0];
	assign LEDR[7:0] = n6;

//		end
endmodule
