
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Actividad4(

	//////////// CLOCK //////////
	input 		          		CLOCK2_50,
	input 		          		CLOCK3_50,
	input 		          		CLOCK4_50,
	input 		          		CLOCK_50,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [9:0]		SW
);

//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire [7:0] registro;
	wire [7:0] salida;

	wire [3:0] centenas;
	wire [3:0] decenas;
	wire [3:0] unidades;

	wire [7:0] n1, n2, n3, n4,
			   n5, n6, n7, n8; 

	wire [7:0] s1, s2, s3, s4, 
			   s5, s6, s7, s8; 

//=======================================================
//  Structural coding
//=======================================================

	registro r1(
		.reloj(KEY[1]),
		.D(SW[7:0]),
		.Q(registro)
	);

	C c1(
		.n1(n1), .n2(n2), .n3(n3), .n4(n4),
		.n5(n5), .n6(n6), .n7(n7), .n8(n8),

		.s1(s1), .s2(s2), .s3(s3), .s4(s4),
		.s5(s5), .s6(s6), .s7(s7), .s8(s8)
	);	

	sopc4 sopc(
		.clk_clk(CLOCK_50), 
		.in0_export(s1), 
		.in1_export(s2), 
		.in2_export(s3), 
		.in3_export(s4), 
		.in4_export(s5), 
		.in5_export(s6), 
		.in6_export(s7), 
		.in7_export(s8), 
		.in_aux_export(registro), 
		.out0_export(n1), 
		.out1_export(n2), 
		.out2_export(n3), 
		.out3_export(n4), 
		.out4_export(n5), 
		.out5_export(n6), 
		.out6_export(n7), 
		.out7_export(n8), 
		.out_aux_export(salida), 
		.reset_reset_n(KEY[0])
	);

	assign LEDR[7:0] = salida;
	assign centenas[3] = 0;
	assign centenas[2] = 0;

	bin2bcd b2b1(
		.b7(salida[7]),
		.b6(salida[6]),
		.b5(salida[5]),
		.b4(salida[4]),
		.b3(salida[3]),
		.b2(salida[2]),
		.b1(salida[1]),
		.b0(salida[0]),
		.p9(centenas[1]),
		.p8(centenas[0]),
		.p7(decenas[3]),
		.p6(decenas[2]),
		.p5(decenas[1]),
		.p4(decenas[0]),
		.p3(unidades[3]),
		.p2(unidades[2]),
		.p1(unidades[1]),
		.p0(unidades[0])
	);

	bcd2hex b2h1(
		.bcd(centenas),
		.seg(HEX2)
	);

	bcd2hex b2h2(
		.bcd(decenas),
		.seg(HEX1)
	);

	bcd2hex b2h3(
		.bcd(unidades),
		.seg(HEX0)
	);

endmodule
