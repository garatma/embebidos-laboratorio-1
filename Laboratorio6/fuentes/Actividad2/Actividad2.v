//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module Actividad2(
	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// LED //////////
	output		     [9:0]		LEDR,

	//////////// SW //////////
	input 		     [7:0]		SW
);



//=======================================================
//  REG/WIRE declarations
//=======================================================

	wire [7:0] n1; 
	wire [7:0] n2; 
	wire [7:0] n3; 
	wire [7:0] n4; 
	wire [7:0] n5; 
	wire [7:0] n6; 
	wire [7:0] n7; 
	wire [7:0] n8; 

	wire [7:0] s1; 
	wire [7:0] s2; 
	wire [7:0] s3; 
	wire [7:0] s4; 
	wire [7:0] s5; 
	wire [7:0] s6; 
	wire [7:0] s7; 
	wire [7:0] s8; 

	wire [7:0] q1; 
	wire [7:0] q2; 
	wire [7:0] q3; 
	wire [7:0] q4; 
	wire [7:0] q5; 
	wire [7:0] q6; 
	wire [7:0] q7; 
	wire [7:0] q8; 

	wire [2:0] cuenta_in;
	wire [2:0] cuenta_out;
	
	wire reloj1;
	wire reloj2;
	wire reloj3;
	wire reloj4;
	wire reloj5;
	wire reloj6;
	wire reloj7;
	wire reloj8;

	wire [7:0] leds;

	wire [3:0] centenas;
	wire [3:0] decenas;
	wire [3:0] unidades;

//=======================================================
//  Structural coding
//=======================================================

	contador cin(
		.reloj(KEY[3]),
		.cuenta(cuenta_in)
	);
	
	demultiplexor dm1(
		.sel(cuenta_in),
		.i(SW[7:0]),
		.s1(n1),
		.s2(n2),
		.s3(n3),
		.s4(n4),
		.s5(n5),
		.s6(n6),
		.s7(n7),
		.s8(n8)
	);

	demultiplexor_1linea dm2(
		.sel(cuenta_in),
		.i(KEY[2]),
		.s1(reloj1),
		.s2(reloj2),
		.s3(reloj3),
		.s4(reloj4),
		.s5(reloj5),
		.s6(reloj6),
		.s7(reloj7),
		.s8(reloj8)
	);

	registro r1(
		.reloj(reloj1),
		.D(n1),
		.Q(q1)
	);
	registro r2(
		.reloj(reloj2),
		.D(n2),
		.Q(q2)
	);
	registro r3(
		.reloj(reloj3),
		.D(n3),
		.Q(q3)
	);
	registro r4(
		.reloj(reloj4),
		.D(n4),
		.Q(q4)
	);
	registro r5(
		.reloj(reloj5),
		.D(n5),
		.Q(q5)
	);
	registro r6(
		.reloj(reloj6),
		.D(n6),
		.Q(q6)
	);
	registro r7(
		.reloj(reloj7),
		.D(n7),
		.Q(q7)
	);
	registro r8(
		.reloj(reloj8),
		.D(n8),
		.Q(q8)
	);

	C c1(
		.n1(q1),
		.n2(q2),
		.n3(q3),
		.n4(q4),
		.n5(q5),
		.n6(q6),
		.n7(q7),
		.n8(q8),
		.s1(s1),
		.s2(s2),
		.s3(s3),
		.s4(s4),
		.s5(s5),
		.s6(s6),
		.s7(s7),
		.s8(s8)
	);	

	contador cout(
		.reloj(KEY[1]),
		.cuenta(cuenta_out)
	);

	multiplexor MS(
		.sel(cuenta_out),
		.n1(s1),
		.n2(s2),
		.n3(s3),
		.n4(s4),
		.n5(s5),
		.n6(s6),
		.n7(s7),
		.n8(s8),
		.salida(leds)
	);

	assign LEDR[7:0] = leds;
	assign centenas[3] = 0;
	assign centenas[2] = 0;

	bin2bcd b2b1(
		.b7(leds[7]),
		.b6(leds[6]),
		.b5(leds[5]),
		.b4(leds[4]),
		.b3(leds[3]),
		.b2(leds[2]),
		.b1(leds[1]),
		.b0(leds[0]),
		.p9(centenas[1]),
		.p8(centenas[0]),
		.p7(decenas[3]),
		.p6(decenas[2]),
		.p5(decenas[1]),
		.p4(decenas[0]),
		.p3(unidades[3]),
		.p2(unidades[2]),
		.p1(unidades[1]),
		.p0(unidades[0])
	);

	bcd2hex b2h1(
		.bcd(centenas),
		.seg(HEX2)
	);

	bcd2hex b2h2(
		.bcd(decenas),
		.seg(HEX1)
	);

	bcd2hex b2h3(
		.bcd(unidades),
		.seg(HEX0)
	);

endmodule
